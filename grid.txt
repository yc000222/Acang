grid 布局 

=============================================================================
table 布局

	table 表格
	
div + css 布局
	
	position 
	display
	float 
	
flex 布局

	一维布局
	主轴
	
grid 布局 

	和table非常相似
	
	二维布局

====================================================================================	
	
	
grid基本概念:

	1. 容器 
	2. 项目
	3. 行和列
	4. 单元格
	5. 网格线
	
====================================================================================

如何开启grid布局 

	display: grid | inline-grid
	
	
======================================================================================

行和列的划分

	grid-template-rows 
	grid-template-columns 
	
	
repeat() 函数 可以帮助我们完成重复的操作

	grid-template-rows :repeat(2, 100px)  表示有两行 每行行高是100px
	grid-template-rows : repeat(2, 100px 80px) 表示有四行 行高: 100px 80px 100px 80px

auto-fill 自动填充
	grid-template-rows :repeat(auto-fill, 100px); 每行的行高是100px 浏览器会根据容器的高度自动设置重复的次数(可能存在填不满的现象)
	
==========================================================================================

fr 
	比例
	
	
==========================================================================================

grid-row-start: 设置起始位置的行所在的网格线编号
grid-column-start: 设置起始位置的列所在的网格线编号
grid-row-end: 设置结束位置的行所在的网格线编号
grid-column-start: 设置结束位置的列所在的网格线编号


=================================================================================

给不同的网格线命名:
第一种写法
grid-template-rows:[r1-start] 100px [r1-end r2-start] 100px [r2-end r3-start] 100px [r3-end];
grid-template-columns:[c1-start] 100px [c1-end c2-start] 100px [c2-end c3-start] 100px [c3-end];

	第一种写法的应用:
		grid-row-start: r3-start;
		grid-row-end: r3-end;
		grid-column-start: c3-start;
		grid-column-end: c3-end;

第二种写法
grid-template-rows: repeat(3, [r-start] 100px [r-end]);
grid-template-columns: repeat(3,[c-start] 100px [c-end]);

	第二种写法的应用：
		grid-row-start: r-start 3;
		grid-row-end: r-end 4;
		grid-column-start: c-start 3;
		grid-column-end: c-end 4;
		
===============================================================================


grid-row 
	grid-row: 3/4;
		第一个值代表行开始所在的网格线
		第二个值代表行结束所在的网格线

grid-column


==================================================================================
span 跨越 
	grid-row: 2 / span 2;
    grid-column: 1 / span 1;


===================================================================================

grid-area: 给子元素设置的
	让元素根据位置进行移动：
	四个值分别代表： 开始行 / 开始列 / 结束行 / 结束列
	grid-area: r 1 / c 3 / r 2 / c 4;

grid-template-areas 给父元素设置的
	作用：
		给不同的单元格起一个名字
	

	例如:
		grid-template-areas: "header header"
							"left right"
							"footer footer";
	 使用: grid-area: left;
==============================================================================
额外的知识点:

	和grid没有什么太大的关系。

	兼容问题：

		优雅降级
		渐进增强


==============================================================================

grid-auto-flow: 调整排列方式

	column 让元素垂直排列
	row 横向排列
	dense 强制用元素填补剩余空间


===============================================================

justify-content: 横向调整网格的位置

align-content: 纵向调整网格的位置

	* start
	* end
	* center
	* space-between
	* space-around
	* space-evenly

上面两个属性的简写属性：

place-content: align-content(垂直方向)  justify-content(横向);

===========================================================================

单元格中的元素，如果不设置宽度和高度，默认占满单元格。
一个单元格中只能放一个元素。

justify-items：调整元素在属于它的单元格中的横向位置
align-items: 调整元素在属于它的单元格中的垂直位置


上面两个属性的简写属性： 

	place-items: align-items(垂直) justify-items(横向)

===========================================================================

设置某一个元素在属于它的单元格中的位置

justify-self:设置某一个元素在单元格中的横向位置
align-self: 设置某一个元素在单元格中的垂直位置

上面两个属性的简写属性：place-self: align-self justify-self


===========================================================
元素移动到单元格之外后设置的行高和列宽
grid-auto-rows: 50px;
grid-auto-columns: 50px;